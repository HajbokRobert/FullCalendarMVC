<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>FullCalendar</title>
    @Scripts.Render("~/bundles/scripts")
    @Styles.Render("~/bundles/styles")
    @*<script>
            var EventClick = function (calEvent, jsEvent, view) {
                alert('Event: ' + calEvent.title);
                alert('Coordinates: ' + jsEvent.pageX + ',' + jsEvent.pageY);
                alert('View: ' + view.name);

                // change the border color just for fun
                $(this).css('border-color', 'red');
            };

            var EventResize = function (event, delta, revertFunc) {
                alert(event.title + " end is now " + event.end.format());

                if (!confirm("is this okay?")) {
                    revertFunc();
                }

            }
        </script>*@
</head>
<body>
    <div class="header">
        <h1>
            <a href="https://fullcalendar.io/" target="_blank">FullCalendar</a> HTML helper for ASP.NET MVC
        </h1>
    </div>
    <div class="content">
        @Html.FullCalendar(settings =>
        {
            settings.Header = new Header
            {
                Left = new ControlsBuilder().AddButton(HeaderButton.Prev).AddSeparator(HeaderSeparator.Adjacent)
                        .AddButton(HeaderButton.Next).AddSeparator(HeaderSeparator.Gap).AddButton(HeaderButton.Today),
                Center = new ControlsBuilder().AddTitle(),
                Right = new ControlsBuilder("month,agendaWeek ").AddView(CalendarView.AgendaDay)
            };
            settings.DefaultView = CalendarView.AgendaDay;
            settings.Editable = true;
            settings.AllDaySlot = false;
            settings.Selectable = true;
            settings.SlotDuration = TimeSpan.FromMinutes(15);
            settings.Events = Url.Action("GetDiaryEvents", "Home");
            //settings.EventSources = new string[] { Url.Action("GetDiaryEvents", "Home"), Url.Action("GetDiaryEvents", "Home") };
            //settings.EventRenderWait = 2000;
            //settings.NextDayThreshold = TimeSpan.FromHours(11);
            //settings.EventTextColor = Color.Gray;
            //settings.EventBorderColor = Color.DarkRed;
            //settings.EventBackgroundColor = Color.Brown;
            //settings.EventColor = Color.SlateBlue;
            //settings.Now = DateTime.Today.AddDays(3);
            //settings.WindowResizeDelay = 3000;
            //settings.HandleWindowResize = false;
            //settings.AspectRatio = 3;
            //settings.HiddenDays = new DayOfWeek[] { DayOfWeek.Tuesday, DayOfWeek.Thursday };
            //settings.FirstDay = DayOfWeek.Thursday;
            //settings.SlotLabelInterval = TimeSpan.FromHours(3);
            //settings.SnapDuration = TimeSpan.FromMinutes(10);
            //settings.ScrollTime = TimeSpan.FromHours(8);
            //settings.MinTime = TimeSpan.FromHours(1);
            //settings.MaxTime = TimeSpan.FromHours(20);
            //settings.Footer = new Footer
            //{
            //    Left = new ControlsBuilder().AddButton(HeaderButton.Prev).AddSeparator(HeaderSeparator.Adjacent)
            //            .AddButton(HeaderButton.Next).AddSeparator(HeaderSeparator.Gap).AddButton(HeaderButton.Today),
            //    Center = new ControlsBuilder().AddTitle(),
            //    Right = new ControlsBuilder("month,agendaWeek ").AddView(CalendarView.AgendaDay)
            //};
            //settings.IsRTL = true;
            //settings.FixedWeekCount = false;
            //settings.WeekNumbers = true;
            //settings.WeekNumbersWithinDays = true;
            //settings.Weekends = false;
            //settings.ShowNonCurrentDates = false;
            //settings.SelectHelper = true;
            //settings.UnselectAuto = false;
            //settings.SlotEventOverlap = false;
            //settings.SlotLabelFormat = "H:mm";
            //settings.AllDayText = "Day";
            //settings.NoEventsMessage = "No events here";
            //settings.ListDayAltFormat = "DDD";
            //settings.ListDayFormat = "DDD";
            //settings.DisplayEventTime = false;
            //settings.DisplayEventEnd = false;
            //settings.ColumnFormat = "ddd M/D";
            //settings.TimeFormat = "H:mm";
            //settings.TitleFormat = "MMMM YYYY";
            //settings.WeekNumberTitle = "Week no.";
            //settings.AllDayDefault = true;
            //settings.StartParam = "startDate";
            //settings.EndParam = "endDate";
            //settings.LazyFetching = false;
            //settings.ForceEventDuration = true;
            //settings.DefaultTimedEventDuration = TimeSpan.FromHours(3);
            //settings.DefaultAllDayEventDuration = TimeSpan.FromDays(2);
            //settings.DefaultDate = DateTime.Today.AddDays(5);
            //settings.NowIndicator = true;
            //settings.SelectMinDistance = 100;
            //settings.SelectLongPressDelay = 1500;
            //settings.EventStartEditable = false;
            //settings.EventDurationEditable = false;
            //settings.DragRevertDuration = 5000;
            //settings.DragOpacity = .2F;
            //settings.DragScroll = false;
            //settings.LongPressDelay = 2000;
            //settings.EventLongPressDelay = 2000;
            //settings.NavLinks = true;
            //settings.ClientSideEvents.NavLinkDayClick = @"function(date, jsEvent) {
            //    console.log('day', date.format()); // date is a moment
            //    console.log('coords', jsEvent.pageX, jsEvent.pageY);
            //}";
            //settings.ClientSideEvents.NavLinkWeekClick = @"function(weekStart, jsEvent) {
            //    console.log('week start', weekStart.format()); // weekStart is a moment
            //    console.log('coords', jsEvent.pageX, jsEvent.pageY);
            //}";
            //settings.ClientSideEvents.DayClick = @"function(date, jsEvent, view) {
            //    alert('Clicked on: ' + date.format());
            //    alert('Coordinates: ' + jsEvent.pageX + ',' + jsEvent.pageY);
            //    alert('Current view: ' + view.name);
            //    // change the day's background color just for fun
            //    $(this).css('background-color', 'red');
            //}";
            //settings.ClientSideEvents.EventClick = "EventClick";
            //settings.ClientSideEvents.EventMouseover = "function(event, jsEvent, view) { console.log(event); }";
            //settings.ClientSideEvents.EventMouseout = "function( event, jsEvent, view ) { console.log(jsEvent); }";
            //settings.ClientSideEvents.ViewRender = "function() { alert('rendered'); }";
            //settings.ClientSideEvents.ViewDestroy = @"function(view, element) {
            //    console.log(view);
            //    console.log(element);
            //    alert('destroyed');
            //}";
            //settings.ClientSideEvents.DayRender = @"function(date, cell) {
            //    console.log(date);
            //    console.log(cell);
            //}";
            //settings.ClientSideEvents.WindowResize = "function(view) { alert('The calendar has adjusted to a window resize'); }";
            //settings.ClientSideEvents.Select = "function() { console.log('Selection made'); }";
            //settings.ClientSideEvents.Unselect = "function() { console.log('Selection cleared'); }";
            //settings.ClientSideEvents.EventDataTransform = "function () { alert('Data should be transformed here and event object should be returned'); }";
            //settings.ClientSideEvents.Loading = "function() { console.info('loading'); }";
            //settings.ClientSideEvents.EventRender = @"function(event, element) {
            //    element.qtip({
            //        content: event.description
            //    });
            //}";
            //settings.ClientSideEvents.EventAfterRender = "function () { console.log('Event after render'); }";
            //settings.ClientSideEvents.EventAfterAllRender = "function(view) { console.log(view); }";
            //settings.ClientSideEvents.EventDestroy = "function() { console.info('event destroyed'); }";
            //settings.ClientSideEvents.EventDragStart = "function() { console.log('event drag start'); }";
            //settings.ClientSideEvents.EventDragStop = "function() { console.log('event drag stop'); }";
            //settings.ClientSideEvents.EventDrop = @"function(event, delta, revertFunc) {
            //    alert(event.title + ' was dropped on ' + event.start.format());
            //    if (!confirm('Are you sure about this change?'))
            //    {
            //        revertFunc();
            //    }
            //}";
            //settings.ClientSideEvents.EventResizeStart = "function() { console.log('Event resize start') }";
            //settings.ClientSideEvents.EventResizeStop = "function() { console.log('event resize stop'); }";
            //settings.ClientSideEvents.EventResize = "EventResize";
            //settings.Droppable = true;
            //settings.ClientSideEvents.Drop = "function(date, jsEvent, ui, resourceId) { }";
            //settings.ClientSideEvents.EventReceive = "function(event) { console.log(event); }";
            //settings.ThemeSystem = ThemeSystem.JqueryUI;
        })
    </div>
</body>
</html>
